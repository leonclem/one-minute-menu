import { createBrowserClient } from '@supabase/ssr'
import type { SupabaseClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables')
}

// Global singleton to prevent multiple instances during HMR
const globalForSupabase = globalThis as unknown as {
  supabase?: SupabaseClient
}

// Single browser client with stable configuration
export const supabase =
  globalForSupabase.supabase ??
  createBrowserClient(supabaseUrl, supabaseAnonKey, {
    auth: {
      persistSession: true,
      flowType: 'pkce',
      detectSessionInUrl: true,
      autoRefreshToken: true,
    },
  })

// Cache the client in development to prevent HMR duplicates
if (process.env.NODE_ENV !== 'production') {
  globalForSupabase.supabase = supabase
}

// Database types (will be generated by Supabase CLI later)
export type Database = {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string
          email: string
          plan: string
          plan_limits: any
          location: string | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id: string
          email: string
          plan?: string
          plan_limits?: any
          location?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          email?: string
          plan?: string
          plan_limits?: any
          location?: string | null
          created_at?: string
          updated_at?: string
        }
      }
      menus: {
        Row: {
          id: string
          user_id: string
          name: string
          slug: string
          status: string
          current_version: number
          menu_data: any
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          user_id: string
          name: string
          slug: string
          status?: string
          current_version?: number
          menu_data: any
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          name?: string
          slug?: string
          status?: string
          current_version?: number
          menu_data?: any
          created_at?: string
          updated_at?: string
        }
      }
      menu_versions: {
        Row: {
          id: string
          menu_id: string
          version: number
          menu_data: any
          published_at: string | null
          created_at: string
        }
        Insert: {
          id?: string
          menu_id: string
          version: number
          menu_data: any
          published_at?: string | null
          created_at?: string
        }
        Update: {
          id?: string
          menu_id?: string
          version?: number
          menu_data?: any
          published_at?: string | null
          created_at?: string
        }
      }
      ocr_jobs: {
        Row: {
          id: string
          user_id: string
          image_url: string
          status: string
          result: any | null
          error_message: string | null
          processing_time: number | null
          created_at: string
          completed_at: string | null
        }
        Insert: {
          id?: string
          user_id: string
          image_url: string
          status?: string
          result?: any | null
          error_message?: string | null
          processing_time?: number | null
          created_at?: string
          completed_at?: string | null
        }
        Update: {
          id?: string
          user_id?: string
          image_url?: string
          status?: string
          result?: any | null
          error_message?: string | null
          processing_time?: number | null
          created_at?: string
          completed_at?: string | null
        }
      }
    }
  }
}